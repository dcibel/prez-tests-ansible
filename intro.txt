Un firefox en plein écran avec le slide des sponsors

Mais où sont les slides ???
---------------------------

>> On se présente, dire ce que l'on fait comme métier.

Bonjour, je m'appelle.....
Nous travaillons à installer, déployer des infrastructures et des services sur des plate-formes que l'on hébergent. Nous assurons le maintien en condition opérationnelle de ces services.

La présentation est intitulée "Développement guidé par les tests de rôles ansible.".

Tout d'abord le slide des sponsors. Merci à eux.

Pascal, la suite s'il te plait.
Ah ... t'as le réseau ? Oui ?
Désolé, notre serveur webserver1 ne répond.


"Les slides ne sont pas déployés ?? Pascal ! Joue ansible s'il te plait" :

>> Pascal lance un xterm (l'écran est splitté en deux)
#> cd demo
#> ansible-playbook -i inventory playbook.yml

(le run ansible se déroule)

(les nouveaux slides apparaissent sur l'écran splitté en deux)

>> pascal zoome sur les slides

Ok on va pouvoir commencer. Donc merci aux sponsors.
Vu que c'est une conférence qui va parler d'ansible revenons un peu sur que Pascal vient de faire.

ansible
-------
Nous venons de déployer les slides sur le serveur via ansible.
Les slides sont disponibles sur la machine appelée webserver1.
Est-ce que l'on peut voir ce que tu as tappé ?

>> pascal splitte en deux son écran
>> zoome sur le terminal
>> augmente la police de caractère
>> et remonte l'historique de son terminal jusqu'à la ligne suivante

#> ansible-playbook -i inventory playbook.yml

Pascal, est-ce que tu peux nous montrer le fichier *inventory* ?

#> cat inventory
webserver1

Ok. donc ce fichier liste les machines de notre plate-forme.
Actuellement, il n'y en a qu'une.
webserver1

Ainsi, nous avons joué ansible sur la machine webserver1.
Regardons le fichier playbook.yml qui était un paramètre de la commande

#> cat playbook.yml

Ok c'est du yaml, il est court.

hosts: all 
                =>  signifie que l'on va jouer la suite
                    pour toutes les machines de l'inventaire 
become: true    =>  [privilege_escalation] become=true dans le fichier local ansible.cfg et plus besoin de cette ligne
tasks: => 2 taches sont listées httpserver et slides
  - httpserver 
  - slides 

On regarde de nouveau la ligne de commande 
Donc la commande ansible-playbook a joué ce playbook sur l'inventaire.

Regardons maintenant le "run ansible"

<< RUN ANSIBLE >>

On commente on lit les noms des tâches 
check/ok

On peut revoir le navigateur ?

(les slides apparaissent sur l'écran splitté en deux)

Tiens j'ai une deuxième machine sur laquelle j'aimerais déployer les slides.

>> Pascal zoome sur le terminal

On peut se connecter en ssh dessus ?

#> ssh webserver2 # doit-on changer le username vagrant ???
#> exit

Y a t'il un serveur web qui écoute sur la machine ?

#> ssh webserver2 
#> telnet localhost 80

Ok donc on va pouvoir jouer ansible sur cette machine.

>> Pascal édite le fichier inventory : ajout de webserver2

On rejoue ansible-playbook :

#> ansible-playbook -i inventory playbook.yml

<< RUN ANSIBLE >>

ok: sur le webserver1
changed: sur le webserver2

On remarque que rien ne se passe sur le webserver1, et que l'on installe/démarre nginx puis déploie les slides sur le webserver2

#> xdg-open http://webserver2

>> Pascal va sur firefox en pleine écran et on visualise le slide sponsors

Les slides sont bien déployés sur ce serveur.

>> On passe au slide suivant

Introduction
------------

L'installation de nos serveurs se fait de manière automatique par nos rôles ansible. Nous gérons environ 200 serveurs avec une trentaine de rôles ansible.
Notre problématique est de pouvoir modifier un rôle ansible sans avoir d'effet de bord sur un serveur qui pourrait ne pas être concerné par cette modification.
L'approche TDD nous permet de sécuriser le déploiement de nos rôles ansible en couvrant la non-régression des rôles.
Cette approche nous permet aussi de nous focaliser sur les fonctionnalités nécessaires à apporter dans un rôle.
>> slide TDD

Ainsi, pour ceux qui ne connaissent pas cette méthodologie, nous appliquons l'algorithme suivant :
  - écrire un test rouge qui décrit un aspect de la plate-forme que nous attendons
  - faire passer ce test au vert le plus rapidement possible avec une implémentation 
  - remanier le code 

Après avoir essayé quelques frameworks de test (test-kitchen, molécule), nous avons mis en place un infra-structure qui permet de tester nos rôles ansible.
Un script shell va s'occuper :
  * de créer un containeur
  * de lancer ansible pour le rôle que nous souhaitons testé dans ce containeur 
  * et de lancer les teste de ce rôle
>> slide plomberie

Voici un schéma qui explique notre démarche.

Maintenant, nous allons vous montrer le développement guidé par les tests d'un role ansible.
 


